package {{domain}}

import (
	"go-skeleton/internal/application/domain/{{domain}}"
	"go-skeleton/internal/application/services"
)

type Service struct {
	services.BaseService
	response   *Response
	repository {{domain}}.Repository
}

func NewService(log services.Logger, repository {{domain}}.Repository) *Service {
	return &Service{
		BaseService: services.BaseService{
			Logger: log,
		},
		repository: repository,
	}
}

func (s *Service) Execute(request Request) {
	if err := request.Validate(); err != nil {
		s.BadRequest(err.Error())
		return
	}

	s.produceResponseRule(request.{{pkName}}, request.Data)
}

func (s *Service) GetResponse() (*Response, *services.Error) {
	return s.response, s.Error
}

func (s *Service) produceResponseRule(id string, data *Data) {
    {{domainCamelCase}} := {{domain}}.{{domainPascalCase}}{{{editServiceData}}}

    affected, err := s.repository.Edit({{domainCamelCase}}, "{{pkDbName}}", id)
    if err != nil {
        s.InternalServerError("error on edit", err)
        return
    }

    if affected < 1 {
        s.UnprocessableEntity("same data or invalid id")
        return
    }

    s.response = &Response{
        Data: data,
    }
}
