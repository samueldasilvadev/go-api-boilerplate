[replacers.crud]
".stub" = ""
crud = "{{domain}}"
crudCamelCase = "{{domainCamelCase}}"
crudPascalCase = "{{domainPascalCase}}"
"{{validatorImport}}" = "\"go-skeleton/internal/application/services\""
"{{validator}}" = "\n	validator services.Validator"
"{{,validator}}" = ", validator services.Validator"
"{{validatorInject}}" = "	validator: validator,"
"{{hsValidator}}" = "hs.validator"
"{{,hsValidator}}" = ", hs.validator"
"{{validatorRule}}" = """errs := r.validator.ValidateStruct(r.Data)
	for _, err := range errs {
		if err != nil {
			return err
		}
	}
"""
"//{{codeGen1}}" = "{{domainCamelCase}}ListRoutes := New{{domainPascalCase}}Routes(reg)\n	$repeat$"
"//{{codeGen2}}" = "\"{{domain}}\": {{domainCamelCase}}ListRoutes,\n		$repeat$"
"//{{codeGen3}}" = "\"go-skeleton/internal/application/domain/{{domain}}\"\n	$repeat$"
"//{{codeGen4}}" = "m.db.Db.Migrator().CreateTable(&{{domain}}.{{domainPascalCase}}{})\n	$repeat$"
"//{{codeGen5}}" = "{{domainCamelCase}}Repository \"go-skeleton/internal/repositories/{{domain}}\"\n	$repeat$"
"//{{codeGen6}}" = "Reg.Provide(\"{{domainCamelCase}}Repository\", {{domainCamelCase}}Repository.New{{domainPascalCase}}Repository(db.Db))\n	$repeat$"
"{{schemaName}}" = "skeleton"
"//{{newTable}}" = """
table "{{domain}}" {
  schema = schema.{{schemaName}}
  column "id" {
    null = false
    type = char(26)
  }
  primary_key {
    columns = [column.id]
  }
}
//tableEnd

$repeat$"""
"{{domainType}}" = """type {{domainPascalCase}} struct {
  ID   string `db:"id"`
}"""
"{{pkType}}" = "ID string `param:\"id\"`"
"{{pkName}}" = "ID"
"{{pkDbName}}" = "id"
"{{dataType}}" = ""
"{{createServiceData}}" = "ID:   s.idCreator.Create(),"
"{{editServiceData}}" = "ID:        id,"
"{{optionalImports}}" = ""
"{{idVar}}" = ""

[stubs.crud.domain]
toPath = "internal/application/domain/{{domain}}/"
fromPath = "tools/generator/stubs/crud/domain/"
isGenerated = true

[stubs.crud.services]
toPath = "internal/application/services/{{domain}}/"
fromPath = "tools/generator/stubs/crud/services/"
isGenerated = true

[stubs.crud.repositories]
toPath = "internal/repositories/{{domain}}/"
fromPath = "tools/generator/stubs/crud/repositories/"
isGenerated = true

[stubs.crud.routes]
toPath = "cmd/http/routes/"
fromPath = "tools/generator/stubs/crud/routes/"
isGenerated = true
uniqueDelete = "cmd/http/routes/{{domain}}.go"

[stubs.crud.handlers]
toPath = "cmd/http/handlers/"
fromPath = "tools/generator/stubs/crud/handlers/"
isGenerated = true
uniqueDelete = "cmd/http/handlers/{{domain}}.go"

[stubs.crud.declarable]
toPath = "cmd/http/routes/declarable.go"
isGenerated = false
deleteLinePatterns = [
	"New{{domainPascalCase}}Routes",
	"\"{{domain}}\": "
]

[stubs.crud.main]
toPath = "cmd/base_setup.go"
isGenerated = false
deleteLinePatterns = [
	"New{{domainPascalCase}}Repo",
	"go-skeleton/internal/repositories/{{domain}}"
]

[stubs.crud.migrator]
toPath = "tools/migrator/migrate.go"
isGenerated = false
deleteLinePatterns = [
	"\"go-skeleton/internal/application/domain/{{domain}}",
	"&{{domain}}.{{domainPascalCase}}{}"
]

[stubs.crud.migrator_schema]
toPath = "tools/migrator/schema/schema.my.hcl"
isGenerated = false
deleteRegex = "(?s)table \"{{domain}}\" {\\s*.*?\\s*}\n*//tableEnd\n\n"

[replacers.usecase]
".stub" = ""
usecase = "{{usecase}}"
usecaseCamelCase = "{{usecaseCamelCase}}"
usecasePascalCase = "{{usecasePascalCase}}"
"//{{codeGen1}}" = "{{usecaseCamelCase}}Route := New{{usecasePascalCase}}Routes(reg)\n	$repeat$"
"//{{codeGen2}}" = "\"{{usecase}}\": {{usecaseCamelCase}}Route,\n		$repeat$"

[stubs.usecase.services]
toPath = "internal/application/services/{{usecase}}/"
fromPath = "tools/generator/stubs/usecase/services/"
isGenerated = true

[stubs.usecase.routes]
toPath = "cmd/http/routes/"
fromPath = "tools/generator/stubs/usecase/routes/"
isGenerated = true
uniqueDelete = "cmd/http/routes/{{usecase}}.go"

[stubs.usecase.handlers]
toPath = "cmd/http/handlers/"
fromPath = "tools/generator/stubs/usecase/handlers/"
isGenerated = true
uniqueDelete = "cmd/http/handlers/{{usecase}}.go"

[stubs.usecase.declarable]
toPath = "cmd/http/routes/declarable.go"
isGenerated = false
deleteLinePatterns = [
	"New{{usecasePascalCase}}Routes",
	"\"{{usecase}}\": "
]
